pub mod bbit;

use crate::bbit::device::BBitResult;
pub use async_trait::async_trait;
use btleplug::api::{Characteristic, Peripheral as _};
use btleplug::platform::Peripheral;
use thiserror::Error;
use uuid::Uuid;

/// Error type for general brainbit errors and internal btleplug Ble errors
#[derive(Debug, Error)]
pub enum Error {
    /// Bluetooth adapter is not found on attempt to scan it
    #[error("No BLE adaptor")]
    NoBleAdaptor,
    /// Could not connect to a device by filter
    #[error("No BLE device")]
    NoDevice,
    /// Device looks as it's not connected, but command was called
    #[error("Not connected")]
    NotConnected,
    /// UUID device's characteristic is missing
    #[error("Characteristic not found")]
    CharacteristicNotFound,
    /// EEG Data packets received from device is not parsed
    #[error("Invalid '{0}'")]
    InvalidData(String),
    /// The command did not return a response
    #[error("No command response")]
    NoControlPointResponse,
    /// An error occurred in the underlying BLE library.
    #[error("BLE error: {0}")]
    BleError(#[from] btleplug::Error),
    #[error("Error generated by event handler")]
    HandlerError(#[from] Box<dyn std::error::Error + Sync + Send>),
}

/// Private helper to find characteristics from a [`Uuid`].
async fn find_characteristic(device: &Peripheral, uuid: Uuid) -> BBitResult<Characteristic> {
    device
        .characteristics()
        .iter()
        .find(|c| c.uuid == uuid)
        .ok_or(Error::CharacteristicNotFound)
        .cloned()
}
